/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const SuccessLazyImport = createFileRoute('/success')()
const PaymentLazyImport = createFileRoute('/payment')()

// Create/Update Routes

const SuccessLazyRoute = SuccessLazyImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/success.lazy').then((d) => d.Route))

const PaymentLazyRoute = PaymentLazyImport.update({
  id: '/payment',
  path: '/payment',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/payment.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/payment': {
      id: '/payment'
      path: '/payment'
      fullPath: '/payment'
      preLoaderRoute: typeof PaymentLazyImport
      parentRoute: typeof rootRoute
    }
    '/success': {
      id: '/success'
      path: '/success'
      fullPath: '/success'
      preLoaderRoute: typeof SuccessLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/payment': typeof PaymentLazyRoute
  '/success': typeof SuccessLazyRoute
}

export interface FileRoutesByTo {
  '/payment': typeof PaymentLazyRoute
  '/success': typeof SuccessLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/payment': typeof PaymentLazyRoute
  '/success': typeof SuccessLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/payment' | '/success'
  fileRoutesByTo: FileRoutesByTo
  to: '/payment' | '/success'
  id: '__root__' | '/payment' | '/success'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PaymentLazyRoute: typeof PaymentLazyRoute
  SuccessLazyRoute: typeof SuccessLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  PaymentLazyRoute: PaymentLazyRoute,
  SuccessLazyRoute: SuccessLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/payment",
        "/success"
      ]
    },
    "/payment": {
      "filePath": "payment.lazy.jsx"
    },
    "/success": {
      "filePath": "success.lazy.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
